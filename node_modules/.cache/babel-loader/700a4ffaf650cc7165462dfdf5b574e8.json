{"ast":null,"code":"import { embedResources } from './embed-resources';\nimport { toArray } from './util';\nimport { isDataUrl, resourceToDataURL } from './dataurl';\nimport { getMimeType } from './mimes';\nasync function embedBackground(clonedNode, options) {\n  var _a;\n  const background = (_a = clonedNode.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue('background');\n  if (background) {\n    const cssString = await embedResources(background, null, options);\n    clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n  }\n}\nasync function embedImageNode(clonedNode, options) {\n  if (!(clonedNode instanceof HTMLImageElement && !isDataUrl(clonedNode.src)) && !(clonedNode instanceof SVGImageElement && !isDataUrl(clonedNode.href.baseVal))) {\n    return;\n  }\n  const url = clonedNode instanceof HTMLImageElement ? clonedNode.src : clonedNode.href.baseVal;\n  const dataURL = await resourceToDataURL(url, getMimeType(url), options);\n  await new Promise((resolve, reject) => {\n    clonedNode.onload = resolve;\n    clonedNode.onerror = reject;\n    const image = clonedNode;\n    if (image.decode) {\n      image.decode = resolve;\n    }\n    if (clonedNode instanceof HTMLImageElement) {\n      clonedNode.srcset = '';\n      clonedNode.src = dataURL;\n    } else {\n      clonedNode.href.baseVal = dataURL;\n    }\n  });\n}\nasync function embedChildren(clonedNode, options) {\n  const children = toArray(clonedNode.childNodes);\n  const deferreds = children.map(child => embedImages(child, options));\n  await Promise.all(deferreds).then(() => clonedNode);\n}\nexport async function embedImages(clonedNode, options) {\n  if (clonedNode instanceof Element) {\n    await embedBackground(clonedNode, options);\n    await embedImageNode(clonedNode, options);\n    await embedChildren(clonedNode, options);\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,cAAc,QAAQ,mBAAmB;AAClD,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,SAAS,EAAEC,iBAAiB,QAAQ,WAAW;AACxD,SAASC,WAAW,QAAQ,SAAS;AAErC,eAAeC,eAAe,CAC5BC,UAAa,EACbC,OAAgB;;EAEhB,MAAMC,UAAU,GAAG,gBAAU,CAACC,KAAK,0CAAEC,gBAAgB,CAAC,YAAY,CAAC;EACnE,IAAIF,UAAU,EAAE;IACd,MAAMG,SAAS,GAAG,MAAMX,cAAc,CAACQ,UAAU,EAAE,IAAI,EAAED,OAAO,CAAC;IACjED,UAAU,CAACG,KAAK,CAACG,WAAW,CAC1B,YAAY,EACZD,SAAS,EACTL,UAAU,CAACG,KAAK,CAACI,mBAAmB,CAAC,YAAY,CAAC,CACnD;;AAEL;AAEA,eAAeC,cAAc,CAC3BR,UAAa,EACbC,OAAgB;EAEhB,IACE,EAAED,UAAU,YAAYS,gBAAgB,IAAI,CAACb,SAAS,CAACI,UAAU,CAACU,GAAG,CAAC,CAAC,IACvE,EACEV,UAAU,YAAYW,eAAe,IACrC,CAACf,SAAS,CAACI,UAAU,CAACY,IAAI,CAACC,OAAO,CAAC,CACpC,EACD;IACA;;EAGF,MAAMC,GAAG,GACPd,UAAU,YAAYS,gBAAgB,GAClCT,UAAU,CAACU,GAAG,GACdV,UAAU,CAACY,IAAI,CAACC,OAAO;EAE7B,MAAME,OAAO,GAAG,MAAMlB,iBAAiB,CAACiB,GAAG,EAAEhB,WAAW,CAACgB,GAAG,CAAC,EAAEb,OAAO,CAAC;EACvE,MAAM,IAAIe,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACpClB,UAAU,CAACmB,MAAM,GAAGF,OAAO;IAC3BjB,UAAU,CAACoB,OAAO,GAAGF,MAAM;IAE3B,MAAMG,KAAK,GAAGrB,UAA8B;IAC5C,IAAIqB,KAAK,CAACC,MAAM,EAAE;MAChBD,KAAK,CAACC,MAAM,GAAGL,OAAc;;IAG/B,IAAIjB,UAAU,YAAYS,gBAAgB,EAAE;MAC1CT,UAAU,CAACuB,MAAM,GAAG,EAAE;MACtBvB,UAAU,CAACU,GAAG,GAAGK,OAAO;KACzB,MAAM;MACLf,UAAU,CAACY,IAAI,CAACC,OAAO,GAAGE,OAAO;;EAErC,CAAC,CAAC;AACJ;AAEA,eAAeS,aAAa,CAC1BxB,UAAa,EACbC,OAAgB;EAEhB,MAAMwB,QAAQ,GAAG9B,OAAO,CAAcK,UAAU,CAAC0B,UAAU,CAAC;EAC5D,MAAMC,SAAS,GAAGF,QAAQ,CAACG,GAAG,CAAEC,KAAK,IAAKC,WAAW,CAACD,KAAK,EAAE5B,OAAO,CAAC,CAAC;EACtE,MAAMe,OAAO,CAACe,GAAG,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,MAAMhC,UAAU,CAAC;AACrD;AAEA,OAAO,eAAe8B,WAAW,CAC/B9B,UAAa,EACbC,OAAgB;EAEhB,IAAID,UAAU,YAAYiC,OAAO,EAAE;IACjC,MAAMlC,eAAe,CAACC,UAAU,EAAEC,OAAO,CAAC;IAC1C,MAAMO,cAAc,CAACR,UAAU,EAAEC,OAAO,CAAC;IACzC,MAAMuB,aAAa,CAACxB,UAAU,EAAEC,OAAO,CAAC;;AAE5C","names":["embedResources","toArray","isDataUrl","resourceToDataURL","getMimeType","embedBackground","clonedNode","options","background","style","getPropertyValue","cssString","setProperty","getPropertyPriority","embedImageNode","HTMLImageElement","src","SVGImageElement","href","baseVal","url","dataURL","Promise","resolve","reject","onload","onerror","image","decode","srcset","embedChildren","children","childNodes","deferreds","map","child","embedImages","all","then","Element"],"sourceRoot":"","sources":["../src/embed-images.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}